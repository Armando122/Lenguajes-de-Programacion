#lang plai

(require "grammars.rkt")
(require "parser.rkt")
(require "desugar.rkt")
;; Búsqueda en el ambiente de evaluación.
;; lookup: symbol Env → AST
(define (lookup sub-id env)
   (match env
      [(mtSub) 
         (error 'lookup "Variable libre")]
      [(aSub id value rest-env)
         (if (symbol=? id sub-id)
             value
             (lookup sub-id rest-env))]))

;; Aplicación de puntos estrictos.
;; strict: AST-Value → AST-Value
(define (strict expr)
   (match expr
      [(exprV expr env) (strict (interp expr env))]
      [else expr]))


;; Análisis semántico
;; interp: AST Env → AST-Value
(define (interp expr env)
     (type-case AST expr
    [id (i) (lookup i env)]
    [num (n) (numV n)]
    [bool (b) (boolV b)]
    [op (p l) (let ([operands (for/list ([i l]) (cond
                                                  [(num? i) (numV (num-n i))]
                                                  [(AST? i) (interp i env)]
                                                  [else i]))])
                (numV (apply p (map numV-n operands))))]
    [iF (cond then-val else-val)
         (let ([c (interp cond env)])
           (if (numV? c)
               (if (= 0 (numV-n c))
                   (interp then-val env)
                   (interp else-val env))
               (error 'interp "Símbolo no esperado la condicional de if, no es un número")))]
    [fun (params body)
         (closureV params body env)]
    [app (func vals)
         (let* ([f (interp func env)]
                [env (closureV-env f)]
                [new-ds (append-params (closureV-param f) vals env env)])
               (interp (closureV-body f) new-ds))]))


;; Función auxiliar para agregar los valores de los parámetros de una función al caché.
;; Recibe una lista con los parámetros reales, una lista con los respectivos parámetros
;; reales, el caché antes de que agregen los parámetros que usamos para interpretar los
;; parámetros reales y un caché donde se irán almecenando los parámetros.
;; append-params: (list-of symbols) (list-of CFWAE) DefrdSub DefrdSub ­-> DefrdSub
(define (append-params params vals ds new-ds)
  (if (empty? params)
      new-ds
      (append-params (cdr params) (cdr vals) ds (aSub (car params) (interp (car vals) ds) new-ds))))


;; Función auxiliar para agregar los valores en una lista de bindings al caché.
;; append-to-cache: (list-of Binding) DefrdSub -> DefrdSub
(define (append-to-cache bindings ds)
  (if (empty? bindings)
      ds
      (let ([bind (car bindings)])
        (append-to-cache (cdr bindings) (aSub (binding-id bind) (interp (binding-value bind) ds) ds)))))